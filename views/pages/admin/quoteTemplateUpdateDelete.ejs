<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quote Maker Admin Portal</title>
    <%- include('../../partials/base.ejs') %>
    <link rel="stylesheet" href="../../../public/styles/admin/adminSidebar.css">
    <link rel="stylesheet" href="../../../public/styles/admin/adminNavbar.css">
    <link rel="stylesheet" href="../../../public/styles/admin/quoteTemplateAdd.css">
    <link rel="stylesheet" href="../../../public/styles/admin/adminCommon.css">

    <link href='http://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>

</head>
<body>
    <%- include('./adminLayoutSideBar.ejs') %>

    <div class="admin_wrapper admin_half">
        <%- include('./adminNavbar.ejs') %>
        <div class="inner_admin">

            <!-- <p class="msg_update"><span>Updated Successfully</span> <span><i class="fa-solid fa-xmark"></i></span></p> -->
            <!-- <p class="msg_delete"><span>Deleted Successfully</span> <span><i class="fa-solid fa-xmark"></i></span></p> -->

            <div class="top_">
                <h2>Update and Delete Quote Template</h2>
                <button onclick="takeAway('/admin/manage-quote-templates')"> Back <i style="margin-left: 5px;" class="fa-solid fa-arrow-left"></i></button>
            </div>

            <div class="editor_">
                <div class="viewer_">
                    <canvas id="canvas" style="display: none ;"></canvas>
                    <img id="result_" src="/public/uploads/<%-template.templateDetails.featuredImage%>" alt="">
                </div>

                <form action="" method="" class="form_">

                    <h2 style="margin-bottom:1rem ;">Canvas Details</h2>

                    <div class="flexer">
                        <div class="field">
                            <label for="height">Canvas Height</label>
                            <input type="number" id="height" value="<%-template.canvasDetails.height%>" name="height">
                        </div>
    
                        <div class="field">
                            <label for="width">Canvas Width</label>
                            <input type="number" id="width" value="<%-template.canvasDetails.width%>" name="width">
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field">
                            <label for="bgColor">Background Color (rgb/color-name)</label>
                            <input type="text" id="bgColor" value="<%-template.canvasDetails.bgColor%>" name="bgColor">
                        </div>
    
                        <div class="field">
                            <label for="bgImage">Background Image Link</label>
                            <input type="text" id="bgImage" value="<%-template.canvasDetails.bgImageURL%>" name="bgImage">
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field field-checkbox">
                            <label for="useBGImage" style="margin-top: 1rem;">
                              <input type="checkbox" id="useBGImage" <%if (template.canvasDetails.useImageForBG) {%>  checked  <%}%>   name="useBGImage"> <span style="margin-top: 5px;">Use Background Image</span>
                            </label>
                        </div>
    
                        <div class="field">
                            <label for="">Image Fit</label>
                            <select id="imageFit">
                                <option value="autoAdjust" <%if (template.canvasDetails.imageFit=="autoAdjust") {%>  selected  <%}%>>Auto</option>
                                <option value="canvasAsImageSize" <%if (template.canvasDetails.imageFit=="canvasAsImageSize") {%>  selected  <%}%>>Canvas as Image Size</option>
                                <option value="ImageAsCanvasSize" <%if (template.canvasDetails.imageFit=="ImageAsCanvasSize") {%>  selected  <%}%>>Image as Canvas Size</option>
                            </select>
                        </div>
                    </div>
                    
                    <h2 style="margin-bottom:1rem ; margin-top: 2rem;">Quote Details</h2>

                    <div class="flexer">
                        <div class="field">
                            <label for="quote">Quote</label>
                            <input type="text" value="<%-template.quoteDetails.quote%>" id="quote" name="quote">
                        </div>
    
                        <div class="field">
                            <label for="quoteFontColor">Font Color (rgb/color-name)</label>
                            <input type="text" value="<%-template.quoteDetails.quoteColor%>" id="quoteFontColor" name="quoteFontColor">
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field">
                            <label for="quoteFontSize">Font Size</label>
                            <input type="number" value="<%-template.quoteDetails.quoteFontSize%>" id="quoteFontSize" name="quoteFontSize">
                        </div>
    
                        <div class="field">
                            <label for="">Font Family</label>
                            <select id="quoteFontFamily">
                                <option style="font-family: '<%-template.quoteDetails.quoteFontFamily%>';"><%-template.quoteDetails.quoteFontFamily%></option>
                            </select>
                        </div>
                    </div>

                    <div class="flexer">
                        <!-- <div class="field">
                            <label for="quoteFontSize">Font Size</label>
                            <input type="number" value="30" id="quoteFontSize" name="quoteFontSize">
                        </div> -->
    
                        <div class="field">
                            <label for="quoteWidth">Width</label>
                            <input type="range" value="<%-template.quoteDetails.quoteWidth%>" id="quoteWidth" name="quoteWidth" min="0" max="100">
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field">
                            <label for="quoteX">X Position</label>
                            <input type="range" id="quoteX" value="<%-template.quoteDetails.quoteXPosition%>" name="quoteX" min="0" max="100">
                        </div>
    
                        <div class="field">
                            <label for="quoteY">Y Position</label>
                            <input type="range" id="quoteY" value="<%-template.quoteDetails.quoteYPosition%>" name="quoteY" min="0" max="100">
                        </div>
                    </div>

                    <h2 style="margin-bottom:1rem ; margin-top: 2rem;">Author Details</h2>

                    <div class="flexer">
                        <div class="field">
                            <label for="author">Author Name (optional)</label>
                            <input type="text" value="<%-template.authorDetails.author%>" id="author" name="author">
                        </div>
    
                        <div class="field">
                            <label for="authorFontColor">Font Color (rgb/color-name)</label>
                            <input type="text" value="<%-template.authorDetails.authorColor%>" id="authorFontColor" name="authorFontColor">
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field">
                            <label for="authorFontSize">Font Size</label>
                            <input type="number" value="<%-template.authorDetails.authorFontSize%>" id="authorFontSize" name="authorFontSize">
                        </div>

                        <div class="field">
                            <label for="">Font Family</label>
                            <select id="authorFontFamily">
                                <option style="font-family: '<%-template.authorDetails.authorFontFamily%>';"><%-template.authorDetails.authorFontFamily%></option>
                            </select>
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field">
                            <label for="authorWidth">Width</label>
                            <input type="range" value="<%-template.authorDetails.authorWidth%>" id="authorWidth" name="authorWidth" min="0" max="100">
                        </div>
                    </div>

                    <div class="flexer">
                        <div class="field">
                            <label for="authorX">X Position</label>
                            <input type="range" value="<%-template.authorDetails.authorXPosition%>" id="authorX" name="authorX" min="0" max="100">
                        </div>
    
                        <div class="field">
                            <label for="authorY">Y Position</label>
                            <input type="range" value="<%-template.authorDetails.authorYPosition%>" id="authorY" name="authorY" min="0" max="100">
                        </div>
                    </div>

                    <h2 style="margin-bottom:1rem ; margin-top: 2rem;">Template Details</h2>

                    <div class="field flexer">
                        <label for="featuredImage">Featured Image</label>
                        <input type="file" name="img" id="featuredImage">
                    </div>

                    <div class="field flexer" style="margin-top: 2rem;">
                        <!-- <p style="flex: 2;" id="view_"><span>View</span> <i class="fa-regular fa-eye"></i></p> -->
                        <p style="flex: 2; background-color: #a9c42d;" id="update_"><span>Update</span> <i class="fa-regular fa-pen-to-square"></i></p>
                        <p style="flex: 2; background-color: #c23232;" id="delete_"><span>Delete</span> <i class="fa-solid fa-trash"></i></p>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        //canvas properties
        const canvasHeight = document.getElementById("height")
        const canvasWidth = document.getElementById("width")
        const canvasBGColor = document.getElementById("bgColor")
        const canvasBGImageUrl = document.getElementById("bgImage")
        const useBGImage = document.getElementById("useBGImage")
        const imageFit = document.getElementById("imageFit")

        canvasHeight.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        canvasWidth.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        canvasBGColor.addEventListener("keyup",()=>canvasImageData(inputTemplateDetails()))
        canvasBGImageUrl.addEventListener("keyup",()=>canvasImageData(inputTemplateDetails()))
        useBGImage.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        imageFit.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))

        //quote properties
        const quote = document.getElementById("quote")
        const quoteFontColor = document.getElementById("quoteFontColor")
        const quoteFontFamily = document.getElementById("quoteFontFamily")
        const quoteFontSize = document.getElementById("quoteFontSize")
        const quoteWidth = document.getElementById("quoteWidth")
        const quoteX = document.getElementById("quoteX")
        const quoteY = document.getElementById("quoteY")

        quote.addEventListener("keyup",()=>canvasImageData(inputTemplateDetails()))
        quoteFontColor.addEventListener("keyup",()=>canvasImageData(inputTemplateDetails()))
        quoteFontFamily.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        quoteFontSize.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        quoteWidth.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        quoteX.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        quoteY.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))

        //author properties
        const author = document.getElementById("author")
        const authorFontColor = document.getElementById("authorFontColor")
        const authorFontFamily = document.getElementById("authorFontFamily")
        const authorFontSize = document.getElementById("authorFontSize")
        const authorWidth = document.getElementById("authorWidth")
        const authorX = document.getElementById("authorX")
        const authorY = document.getElementById("authorY")

        author.addEventListener("keyup",()=>canvasImageData(inputTemplateDetails()))
        authorFontColor.addEventListener("keyup",()=>canvasImageData(inputTemplateDetails()))
        authorFontFamily.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        authorFontSize.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        authorWidth.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        authorX.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))
        authorY.addEventListener("change",()=>canvasImageData(inputTemplateDetails()))

        //template details
        const featuredImage = document.getElementById("featuredImage")

        //loading fonts
        const fonts = "<%= fonts %>"
        let fontsArray = fonts.split(',');
        const fontsForUse = fontsArray.map((x)=>{
            return x.replace(/\.[^\/.]+$/, '')
        })
        fontsArray.forEach((x)=>{
            const option = document.createElement("option")
            option.value=x.replace(/\.[^\/.]+$/, '')
            option.innerHTML=x.replace(/\.[^\/.]+$/, '')
            option.style.fontFamily=x.replace(/\.[^\/.]+$/, '')
            quoteFontFamily.appendChild(option)
        })

        fontsArray.forEach((x)=>{
            const option = document.createElement("option")
            option.value=x.replace(/\.[^\/.]+$/, '')
            option.innerHTML=x.replace(/\.[^\/.]+$/, '')
            option.style.fontFamily=x.replace(/\.[^\/.]+$/, '')
            authorFontFamily.appendChild(option)
        })
        fontsArray.forEach((value,index)=>{
            let x = new FontFace(fontsForUse[index], `url(../.././public/fonts/${value})`);
            x.load().then((font) => {
            document.fonts.add(font);
        });
        })

        // const view_ = document.getElementById("view_")
        const update_ = document.getElementById("update_")
        const delete_ = document.getElementById("delete_")

        update_.addEventListener('click',()=>{
            startLoading()
            updateTemplateDetails(inputTemplateDetails())
        })

        delete_.addEventListener('click',()=>{
            startLoading()
            deleteTemplateDetails()
        })

        // view_.addEventListener("click",()=>{
        //     getImageDetails(inputTemplateDetails())
        // })

        const updateTemplateDetails=async(details)=>{
            let formData = new FormData(); 
            formData.append("featuredImage", featuredImage.files[0]);
            formData.append("previousFeaturedImage", "<%-template.templateDetails.featuredImage%>");
            formData.append("imgData",JSON.stringify(details))
            const res = await fetch("/templates/"+'<%-template._id%>',{
                method: 'PUT',
                body:formData
            })
            const data = await res.json()
            stopLoading()
            window.location.href="/admin/manage-quote-templates"
        }

        const deleteTemplateDetails=async()=>{
            const res = await fetch("/templates/"+'<%-template._id%>',{
                method: 'DELETE'
            })
            const data = await res.json()
            stopLoading()
            if(data?.msg==="success"){
                window.location.href="/admin/manage-quote-templates"
            }
        }

        const getImageDetails=async(details)=>{
            const res = await fetch("/quote/getImageData",{
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body:JSON.stringify(details)
            })
            const data = await res.json()
            console.log(data)
            document.getElementById("result_").src=data.imageData
        }



        const canvasImageData = (data)=>{

            const canvas = document.getElementById("canvas")
            const ctx = canvas.getContext('2d')

            canvas.height = data.canvasDetails.height
            canvas.width = data.canvasDetails.width

            ctx.fillStyle = data.canvasDetails.bgColor;
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            if(data.canvasDetails.useImageForBG){

                let myimg = new Image();
                myimg.crossOrigin = 'Anonymous'
                myimg.src = data.canvasDetails.bgImageURL

                myimg.onload = function () {

                if(data.canvasDetails.imageFit=="autoAdjust"){
                    if(myimg.height<canvas.height && myimg.width<canvas.width){
                        canvas.height= myimg.height
                        canvas.width= myimg.width
                    }
                    var ratio = myimg.height / myimg.width;
                    canvas.height = canvas.width * ratio
                    ctx.drawImage(myimg, 0,0, canvas.width, canvas.height); 
                }

                if(data.canvasDetails.imageFit=="canvasAsImageSize"){
                    canvas.height= myimg.height
                    canvas.width= myimg.width
                    ctx.drawImage(myimg, 0,0, canvas.width, canvas.height); 
                }

                if(data.canvasDetails.imageFit=="ImageAsCanvasSize"){
                    ctx.drawImage(myimg, 0, 0, myimg.width, myimg.height, 0, 0, canvas.width, canvas.height);
                }

                //text 1 properties
                var maxWidthQ = data.quoteDetails.quoteWidth * 0.01 * canvas.width;
                var lineHeightQ = data.quoteDetails.quoteFontSize + 5;
                var xQ = data.quoteDetails.quoteXPosition*0.01*canvas.width;
                var yQ = data.quoteDetails.quoteYPosition*0.01*canvas.height;
                var textQ = data.quoteDetails.quote;
                ctx.font = `${data.quoteDetails.quoteFontSize}px ${data.quoteDetails.quoteFontFamily}`;
                ctx.fillStyle = data.quoteDetails.quoteColor

                wrapText(ctx, textQ, xQ, yQ, maxWidthQ, lineHeightQ);

                //text 2 properties
                var maxWidth = data.authorDetails.authorWidth *0.01 * canvas.width;
                var lineHeight = data.authorDetails.authorFontSize + 5;
                var x = data.authorDetails.authorXPosition*0.01*canvas.width;
                var y = data.authorDetails.authorYPosition*0.01*canvas.height;
                var text = data.authorDetails.author;
                ctx.font = `${data.authorDetails.authorFontSize}px ${data.authorDetails.authorFontFamily}`;
                ctx.fillStyle = data.authorDetails.authorColor

                wrapText(ctx, text, x, y, maxWidth, lineHeight);

                document.getElementById("result_").src = canvas.toDataURL('image/png');


            }
        }
        else{
                //text 1 properties
                var maxWidthQ = data.quoteDetails.quoteWidth * 0.01 * canvas.width;
                var lineHeightQ = data.quoteDetails.quoteFontSize + 5;
                var xQ = data.quoteDetails.quoteXPosition*0.01*canvas.width;
                var yQ = data.quoteDetails.quoteYPosition*0.01*canvas.height;
                var textQ = data.quoteDetails.quote;
                ctx.font = `${data.quoteDetails.quoteFontSize}px ${data.quoteDetails.quoteFontFamily}`;
                ctx.fillStyle = data.quoteDetails.quoteColor

                wrapText(ctx, textQ, xQ, yQ, maxWidthQ, lineHeightQ);

                //text 2 properties
                var maxWidth = data.authorDetails.authorWidth *0.01 * canvas.width;
                var lineHeight = data.authorDetails.authorFontSize + 5;
                var x = data.authorDetails.authorXPosition*0.01*canvas.width;
                var y = data.authorDetails.authorYPosition*0.01*canvas.height;
                var text = data.authorDetails.author;
                ctx.font = `${data.authorDetails.authorFontSize}px ${data.authorDetails.authorFontFamily}`;
                ctx.fillStyle = data.authorDetails.authorColor

                wrapText(ctx, text, x, y, maxWidth, lineHeight);

                document.getElementById("result_").src = canvas.toDataURL('image/png');

        }

        }

        function wrapText(ctx, text, x, y, maxWidth, lineHeight) {
        var words = text.split(' ');
        var line = '';

        for(var n = 0; n < words.length; n++) {
        var testLine = line + words[n] + ' ';
        var metrics = ctx.measureText(testLine);
        var testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
            ctx.fillText(line, x, y);
            line = words[n] + ' ';
            y += lineHeight;
        }
        else {
            line = testLine;
        }
        }
        ctx.fillText(line, x, y);
    }


    const inputTemplateDetails=()=>{
            return {
                    canvasDetails:{
                    height:parseInt(canvasHeight.value),
                    width:parseInt(canvasWidth.value),
                    bgColor:canvasBGColor.value,
                    bgImageURL:canvasBGImageUrl.value,
                    useImageForBG:useBGImage.checked,
                    imageFit:imageFit.value
                },
                quoteDetails:{
                    quote:quote.value,
                    quoteColor:quoteFontColor.value,
                    quoteFontFamily:quoteFontFamily.value,
                    quoteFontSize:parseInt(quoteFontSize.value),
                    quoteXPosition:parseInt(quoteX.value),
                    quoteYPosition:parseInt(quoteY.value),
                    quoteWidth:parseInt(quoteWidth.value)
                },
                authorDetails:{
                    author:author.value,
                    authorColor:authorFontColor.value,
                    authorFontFamily:authorFontFamily.value,
                    authorFontSize:parseInt(authorFontSize.value),
                    authorXPosition:parseInt(authorX.value),
                    authorYPosition:parseInt(authorY.value),
                    authorWidth:parseInt(authorWidth.value)
                },
                templateDetails:{
                    featuredImage:""
                }
            }
    }
    </script>
</body>
</html>